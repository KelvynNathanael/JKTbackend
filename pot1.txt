  app.post("/signin", async (req, res) => {
    try {
        // Check email format
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(req.body.email)) {
            req.flash("error", "Invalid email format");
            return res.redirect("/signin");
        }
        // Cek apakah pengguna dengan email atau nama yang sama sudah ada
        const existingUser = await User.findOne({ $or: [{ email: req.body.email }, { name: req.body.name }] });
        if (existingUser) {
            if (existingUser.email === req.body.email) {
                req.flash("error", "Email already exists");
            } else if (existingUser.name === req.body.name) {
                req.flash("error", "Name already exists");
            }
            return res.redirect("/signin");
        } else {
            const hashedPassword = await bcrypt.hash(req.body.password, 10); // Hash password menggunakan bcrypt
    
            const newUser = new User({
                name: req.body.name,
                email: req.body.email,
                password: hashedPassword, // Menyimpan password yang telah di-hash
            });
    
            await newUser.save(); // Menyimpan pengguna baru ke dalam database
            console.log(newUser); // Menampilkan informasi pengguna baru di console
            res.redirect("/login"); // Redirect ke halaman login setelah berhasil mendaftar
        }
    } catch (e) {
        console.log(e);
        res.redirect("/signin");
    }
});

app.post("/signup", async (req, res) => {
    const data = {
        name: req.body.username,
        password: req.body.password
    }
    
    //cek apakah nama sama atau tidak
    const existingUser = await collection.findOne({name: data.name});
    if(existingUser){
        res.render("signup", { errorMessage: "User already exist, pick another Username." });
            return;
    }else{
        //hash password
        const saltRounds = 10;
        const hashedpassword = await bcrypt.hash(data.password, saltRounds);

        data.password = hashedpassword;

        const userdata = await collection.insertMany(data);
        console.log(userdata);    

        res.render("login", { errorMessage: "" });
    }
});


app.post("/login", async (req, res) => {
    try {
        const check = await collection.findOne({ name: req.body.username });

        if (!check) {
            res.render("login", { errorMessage: "User name can't be found" });
            return;
        }
        
        // Compare passwords
        const isPasswordMatch = await bcrypt.compare(req.body.password, check.password);
        if (!isPasswordMatch) {
            res.render("login", { errorMessage: "Wrong password" });
        } else {
            res.render("index", { userName: check.name });
        }
    } catch (error) {
        console.error(error);
        res.render("login", { errorMessage: "An error occurred while processing your request." });
    }
});